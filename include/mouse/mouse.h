/**
 * @file mouse.h
 * @author Madhu Narra Chittibabu (madhunc117@gmail.com)
 * @brief The file contains the Mouse class
 * @version 0.1
 * @date 2021-10-24
 *
 * @copyright Copyright (c) 2021
 *
 */

 /*! \mainpage Maze search algorithm
  *
  * This project consists of searching a path in a maze
  * and then task a mouse (robot) to follow the path.
  * - \subpage searchingPathPage "Searching a path"
  *
  * - \subpage followingPathPage "Following a path"
  *
  */
 
  /*! \page searchingPathPage Searching a path
   *
   * The search algorithm used for searching a path in a maze relies on
   * the depth-first search (DFS) approach. This algorithm is implemented in rwa2::Mouse::search_maze()
   *
   */

   /*! \page followingPathPage Following a path
    *
    * To follow a path generated by DFS, methods from the class API (api/api.h) must be used to interact
    * with the micromouse simulator.
    * - Methods of the API class are documented <a href="https://github.com/mackorone/mms#summary">here</a>.
    */


#ifndef MICROMOUSE_H
#define MICROMOUSE_H

#include "../node/node.h"
#include "../util/util.h"
#include <array>
#include <vector>
#include <stack>
#include <list>

namespace rwa2 {
    /**
     * @brief This class is used to compute a path and execute the path.
     *
     */
    class Mouse {
        public:
        /**
         * @brief Construct a new MicroMouse object
         *
         * The robot is always at (0,0) and facing NORTH when the simulator starts
         */
        Mouse() :m_x{ 0 }, m_y{ 0 }, m_direction{ direction::NORTH } {
            //initialize the maze by placing around the perimeter of the maze
            for (int x = 0; x < m_maze_width; x += 1) {
                for (int y = 0; y < m_maze_height; y += 1) {
                    m_maze.at(x).at(y).set_wall(direction::NORTH, (y == m_maze_height - 1));
                    m_maze.at(x).at(y).set_wall(direction::EAST, (x == m_maze_width - 1));
                    m_maze.at(x).at(y).set_wall(direction::SOUTH, (y == 0));
                    m_maze.at(x).at(y).set_wall(direction::WEST, (x == 0));
                }
            }
        }
        
        /**
         * @brief This method visually sets the walls in the simulator.
         * 
         */
        void display_walls();

        //IMPLEMENT THE METHODS BELOW
        //Note: Come up with your own parameters and implementations
        /**
         * @brief Implement DFS to compute a path between 2 nodes in a maze
         *
         * @return true A path is found
         * @return false A path is not found
         */
        bool search_maze();

        /**
         * @brief Make the mouse move forward
         *
         */
        void move_forward();

        /**
         * @brief Make the mouse rotate 90 deg CCW
         *
         */
        void turn_left();

        /**
         * @brief Make the mouse rotate 90 deg CW
         *
         */
        void turn_right();

        /**
         * @brief This function makes the mouse move given a path stack.
         * 
         */
        void follow_path();

        /**
         * @brief Returns true if a given vector exists in the 2D vector space.
         * 
         * @param vect 
         * @param src 
         * @return true 
         * @return false 
         */
        bool find_vector(std::vector<std::pair<int,int>> vect, std::pair <int,int> src);

        /**
         * @brief Inverts the stack so as to return a path to the mouse. 
         * 
         * @param stk 
         */
        void reverse_stack (std::stack<std::pair<int, int>> &stk);

        /**
         * @brief This function will check and set walls in each node.
         * 
         */
        void check_walls();

        /**
         * @brief Provides the change in direction for the mouse in the maze.
         * 
         */
        void mouse_move();

        /**
         * @brief Empty the stack when a path is no longer desired!
         * 
         */
        void empty_my_stack();

        /**
         * @brief Returns true if a change in mouse direction is required.
         * 
         * @param current_node 
         * @param next_node 
         * @return true 
         * @return false 
         */
        bool change_direction(std::pair<int,int> current_node,std::pair<int,int> next_node);

        /**
         * @brief Checks if the path computed is actually feasible in the maze implementation.
         * 
         * @param current_node 
         * @param next_node 
         * @return true 
         * @return false 
         */
        bool path_feasibilty(std::pair<int,int> current_node,std::pair<int,int> next_node);

        
        private:
        static const int m_maze_width{ 16 }; //width of the maze
        static const int m_maze_height{ 16 };//height of the maze
        int m_x; //x position of the robot in the maze
        int m_y; //y position of the robot in the maze
        int m_direction; //direction of the robot in the maze
        std::pair<int,int> m_goal_node {8,8}; //set the goal node yo (8,8)
        std::pair<int,int> m_cords {m_x,m_y}; //current position of the mouse
        std::array<std::array<Node, m_maze_width>, m_maze_height> m_maze; //2D array maze object
        std::stack<std::pair<int,int>> m_stk; //stack to store the visited nodes
        std::vector<std::pair<int,int>> m_visited; //vector to store all the visited nodes
        int m_new_direction{0}; //variable to store direction change
        int m_backtracking_counter {0}; //counter used to backtrack
        
    };
}
#endif
